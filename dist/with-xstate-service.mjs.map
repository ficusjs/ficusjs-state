{"version":3,"file":"with-xstate-service.mjs","sources":["../src/base-persist.mjs","../src/util/wrap-xstate-service.mjs","../src/with-xstate-service.mjs"],"sourcesContent":["class BasePersist {\n  /**\n   * Create an instance of persistence with the unique namespace identifier\n   * @param {string} namespace\n   * @param {object} storage\n   * @param {object} options\n   */\n  constructor (namespace, storage, options = {}) {\n    this.namespace = namespace\n    this.storage = storage\n    this.options = options\n    this._init()\n  }\n\n  /**\n   * Private method for initializing\n   * @private\n   */\n  _init () {\n    if ('performance' in globalThis && this.options.clearOnReload) {\n      // @ts-ignore\n      const entries = globalThis.performance.getEntriesByType('navigation').map(e => e.type)\n      const lastUpdated = this.lastUpdated()\n      if (lastUpdated && entries.includes('reload')) {\n        this.removeState()\n      }\n    }\n  }\n\n  /**\n   * Set state in the persistence store\n   * @param {*} state\n   */\n  setState (state) {\n    if (state) {\n      this.storage.setItem(`${this.namespace}:state`, this._normalizeState(state))\n      this.storage.setItem(`${this.namespace}:lastUpdated`, new Date().getTime().toString())\n    } else {\n      this.removeState()\n    }\n  }\n\n  /**\n   * Normalize state before persisting\n   * @param state\n   * @returns {string}\n   * @private\n   */\n  _normalizeState (state) {\n    if (typeof state === 'object' && (this.options.saveState && typeof this.options.saveState === 'function')) {\n      return JSON.stringify(this.options.saveState(state))\n    } else if (typeof state !== 'string') {\n      return JSON.stringify(state)\n    }\n    return state\n  }\n\n  /**\n   * Get state from the persistence store\n   * @returns {*}\n   */\n  getState () {\n    const state = this.storage.getItem(`${this.namespace}:state`)\n    return state ? JSON.parse(state) : undefined\n  }\n\n  /**\n   * Get the last updated time in milliseconds since the Unix Epoch\n   * @returns {number}\n   */\n  lastUpdated () {\n    const lastUpdated = this.storage.getItem(`${this.namespace}:lastUpdated`)\n    return lastUpdated ? parseInt(lastUpdated, 10) : undefined\n  }\n\n  /**\n   * Remove state from the persistence store\n   */\n  removeState () {\n    this.storage.removeItem(`${this.namespace}:state`)\n    this.storage.removeItem(`${this.namespace}:lastUpdated`)\n  }\n}\n\n/**\n * Function to create persistence for the store\n * @param {string} namespace\n * @param {string} [storageName]\n * @param {object} [options]\n * @returns {BasePersist}\n */\nfunction createPersist (namespace, storageName = 'session', options) {\n  if (storageName === 'local') {\n    return new BasePersist(namespace, globalThis.localStorage, options)\n  }\n  return new BasePersist(namespace, globalThis.sessionStorage, options)\n}\n\nexport { BasePersist, createPersist }\n","import { createPersist } from '../base-persist.mjs'\n\nexport function wrapXStateService (service, getters, persist) {\n  const wrappedService = {\n    _xstateService: service,\n    _getterCache: {},\n    _persist: typeof persist === 'string' ? createPersist(persist) : persist,\n    get status () {\n      if (!this._xstateService) return XStateServiceStatus.INIT\n      return this._xstateService.status\n    },\n    get state () {\n      return this._xstateService.state\n    },\n    subscribe (callback) {\n      return this._xstateService.subscribe(() => {\n        this._getterCache = {}\n        if (this._persist && this._xstateService.status === XStateServiceStatus.RUNNING) {\n          this._persist.setState(this._xstateService.state)\n        }\n        callback()\n      })\n    },\n    send (action) {\n      this._xstateService.send(action)\n    },\n    start () {\n      this._xstateService.start(this._persist ? this._persist.getState() : undefined)\n    }\n  }\n  if (getters) {\n    wrappedService.getters = new Proxy(getters, {\n      get (getters, key) {\n        if (!wrappedService._getterCache[key]) {\n          const result = getters[key](wrappedService._xstateService.state.context)\n          wrappedService._getterCache[key] = result\n        }\n        return wrappedService._getterCache[key]\n      }\n    })\n  }\n  return wrappedService\n}\n\nexport const XStateServiceStatus = Object.freeze({\n  INIT: -1,\n  NOT_STARTED: 0,\n  RUNNING: 1,\n  STOPPED: 2\n})\n","import { wrapXStateService, XStateServiceStatus } from './util/wrap-xstate-service.mjs'\n\nexport function withXStateService (service, options) {\n  return {\n    ...options,\n    created () {\n      this._subscribeCallback = () => {\n        // clear the computed cache\n        this.computedCache = {}\n\n        // Run the render processor now that there's changes\n        this._processRender()\n      }\n      this.setXStateService(service)\n      if (options.created) options.created.call(this)\n    },\n    mounted () {\n      this._subscribeToFsmService(false)\n      if (options.mounted) options.mounted.call(this)\n    },\n    updated () {\n      this._subscribeToFsmService(false)\n      if (options.updated) options.updated.call(this)\n    },\n    removed () {\n      this._unsubscribeFromFsmService()\n      if (options.removed) options.removed.call(this)\n    },\n    setXStateService (service) {\n      this.fsm = service && service.status !== XStateServiceStatus.INIT ? service : wrapXStateService(service)\n      this._fsmSubscriptionCallback = () => {\n        if (this.fsm.status === XStateServiceStatus.RUNNING && this._fsmSubscription) {\n          this._subscribeCallback()\n        }\n      }\n      this._subscribeToFsmService()\n    },\n    _startFsmService () {\n      if (this.fsm && this._fsmSubscription && this.fsm.status === XStateServiceStatus.NOT_STARTED) {\n        this.fsm.start()\n      }\n    },\n    _subscribeToFsmService (invokeSubscribeCallback = true) {\n      if (this.fsm && this.fsm.status !== XStateServiceStatus.INIT && !this._fsmSubscription) {\n        this._fsmSubscription = this.fsm.subscribe(this._fsmSubscriptionCallback)\n        if (invokeSubscribeCallback) this._fsmSubscriptionCallback()\n        this._startFsmService()\n      }\n    },\n    _unsubscribeFromFsmService () {\n      if (this.fsm && this.fsm.status !== XStateServiceStatus.INIT && this._fsmSubscription && typeof this._fsmSubscription === 'function') {\n        this._fsmSubscription()\n        this._fsmSubscription = null\n      }\n    }\n  }\n}\n"],"names":["BasePersist","constructor","namespace","storage","options","this","_init","globalThis","clearOnReload","entries","performance","getEntriesByType","map","e","type","lastUpdated","includes","removeState","setState","state","setItem","_normalizeState","Date","getTime","toString","saveState","JSON","stringify","getState","getItem","parse","undefined","parseInt","removeItem","createPersist","storageName","localStorage","sessionStorage","XStateServiceStatus","Object","freeze","INIT","NOT_STARTED","RUNNING","STOPPED","withXStateService","service","created","_subscribeCallback","computedCache","_processRender","setXStateService","call","mounted","_subscribeToFsmService","updated","removed","_unsubscribeFromFsmService","fsm","status","getters","persist","wrappedService","_xstateService","_getterCache","_persist","subscribe","callback","send","action","start","Proxy","get","key","result","context","wrapXStateService","_fsmSubscriptionCallback","_fsmSubscription","_startFsmService","invokeSubscribeCallback"],"mappings":"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"}