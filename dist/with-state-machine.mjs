class t{constructor(t){this.machine=t}get initialState(){return this.machine.initial||Object.keys(this.machine.states)[0]}transition(t,i){return this.machine.states[t].on[i]}}function withStateMachine(i,e){return{...e,created(){this._stateMachineDefinition=i,this._stateMachine=new t(i),this.initialState=this._stateMachine.initialState,this.state={context:{},matches(t){return t===this.value},value:this.initialState},this.setState=(t,i)=>{if(!t||"object"!=typeof t)return;const e=this.updated;i&&(this.updated=()=>{i.call(this),this.updated=e||void 0}),this.status="transaction";for(const i in t)"value"===i?this.state[i]=t[i]:this.state.context[i]&&this.state.context[i]===t[i]||(this.state.context[i]=t[i]);this.status="render",this._processRender()},e.created&&e.created.call(this)},send(t){let i,e;if("string"==typeof t)i=t;else{const{type:s,...a}=t;i=s,e=a}const{value:s}=this.state,a=this._stateMachine.transition(s,i)||s,n=this._stateMachineDefinition.actions&&this._stateMachineDefinition.actions[a]?()=>this._stateMachineDefinition.actions[a].call(this,e):()=>{};this.setState({value:a},n)}}}export{withStateMachine};
