{"version":3,"file":"with-local-state.mjs","sources":["../src/with-local-state.mjs","../src/util/is-promise.mjs"],"sourcesContent":["import { isPromise } from './util/is-promise.mjs'\n\nexport function withLocalState (options) {\n  return {\n    ...options,\n    created () {\n      // check the state\n      if (options.state && typeof options.state !== 'function') throw new Error('State must be a function!')\n      this._state = options.state || {}\n\n      // Take whatever is passed and set it as a proxy in local state\n      if (typeof this._state === 'function') {\n        this._state = this._state.bind(this)()\n      }\n      this.state = this._monitorState(this._state)\n\n      // set state method\n      this.setState = (stateFn, callback) => {\n        const setter = data => {\n          if (!data || typeof data !== 'object') return\n          const existingUpdated = this.updated\n          if (callback) {\n            this.updated = () => {\n              callback()\n              this.updated = existingUpdated || undefined\n            }\n          }\n          this.status = 'transaction'\n          for (const key in data) {\n            if (!this.state[key] || (this.state[key] !== data[key])) this.state[key] = data[key]\n          }\n          this.status = 'render'\n          this._processRender()\n        }\n        const res = stateFn(this.state)\n        isPromise(res) ? res.then(setter) : setter(res)\n      }\n\n      if (options.created) options.created.call(this)\n    },\n    _monitorState (objectInstance) {\n      const self = this\n\n      return new Proxy(objectInstance, {\n        set (obj, property, value) {\n          // We don't want to do anything if there's no actual changes to make\n          if (obj[property] === value) return true\n\n          // Allow the value to be set with no dramas\n          obj[property] = value\n\n          // clear the computed cache\n          self.computedCache = {}\n\n          // Run the render processor now that there's changes\n          if (self.status === 'render') self._processRender()\n\n          return true\n        }\n      })\n    }\n  }\n}\n","export function isPromise (obj) {\n  return (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function'\n}\n"],"names":["withLocalState","options","created","state","Error","this","_state","bind","_monitorState","setState","stateFn","callback","setter","data","existingUpdated","updated","undefined","status","key","_processRender","res","obj","then","call","objectInstance","self","Proxy","set","property","value","computedCache"],"mappings":"AAEO,SAASA,eAAgBC,GAC9B,MAAO,IACFA,EACH,OAAAC,GAEE,GAAID,EAAQE,OAAkC,mBAAlBF,EAAQE,MAAsB,MAAM,IAAIC,MAAM,6BAC1EC,KAAKC,OAASL,EAAQE,OAAS,CAAE,EAGN,mBAAhBE,KAAKC,SACdD,KAAKC,OAASD,KAAKC,OAAOC,KAAKF,KAAjBA,IAEhBA,KAAKF,MAAQE,KAAKG,cAAcH,KAAKC,QAGrCD,KAAKI,SAAW,CAACC,EAASC,KACxB,MAAMC,OAASC,IACb,IAAKA,GAAwB,iBAATA,EAAmB,OACvC,MAAMC,EAAkBT,KAAKU,QACzBJ,IACFN,KAAKU,QAAU,KACbJ,IACAN,KAAKU,QAAUD,QAAmBE,CAAS,GAG/CX,KAAKY,OAAS,cACd,IAAK,MAAMC,KAAOL,EACXR,KAAKF,MAAMe,IAASb,KAAKF,MAAMe,KAASL,EAAKK,KAAOb,KAAKF,MAAMe,GAAOL,EAAKK,IAElFb,KAAKY,OAAS,SACdZ,KAAKc,gBAAgB,EAEjBC,EAAMV,EAAQL,KAAKF,OClC1B,IAAoBkB,EACF,iBADEA,EDmCTD,IClCkC,mBAARC,GAA2C,mBAAbA,EAAIC,KDkClCV,OAAOQ,GAA1BA,EAAIE,KAAKV,OAAqB,EAG7CX,EAAQC,SAASD,EAAQC,QAAQqB,KAAKlB,KAC3C,EACD,aAAAG,CAAegB,GACb,MAAMC,EAAOpB,KAEb,OAAO,IAAIqB,MAAMF,EAAgB,CAC/BG,IAAI,CAACN,EAAKO,EAAUC,KAEdR,EAAIO,KAAcC,IAGtBR,EAAIO,GAAYC,EAGhBJ,EAAKK,cAAgB,CAAE,EAGH,WAAhBL,EAAKR,QAAqBQ,EAAKN,mBATC,IAczC,EAEL"}